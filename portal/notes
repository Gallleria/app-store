TO SETUP PORTAL
|merge %portal our %base
|mount %portal
- erase the portal folder and replace it with the one from github
|commit %portal
|install our %portal

TO NUKE
|nuke %portal, =desk &
|rein %portal [& %portal-manager]

TO SEED DATA ON THE LIVE NETWORK USE THE FOLLOWING COMMANDS
=data -build-file /=portal=/sur/portal/data/hoon
=lib -build-file /=portal=/lib/portal/hoon

:portal-manager &portal-action :-  %add  :^  our  [%enditem %other ~]
:*
'Software as Soulcraft and the Metaphysics of Engineering with Neal Davis'
'https://www.youtube.com/watch?v=8f8vk1BhlDo'
'Neal Davis is a professor of computer science and the director of Urbit\'s Hoon School. We discuss why solving nuclear fusion might be a disaster, why Urbit computers have souls, Shinto philosophy, why you should read old books, how to select books, and much more. This was really good!'
*tags:data
*properties:data
*pictures:data
'http://i3.ytimg.com/vi/8f8vk1BhlDo/hqdefault.jpg'
''
==
[%enditem-other ~]

:portal-manager &portal-action :-  %add  :^  our  [%enditem %other ~]
:*
'Urbit, Blockchains, & the Next Billion Users with Ted Blackman, Engineer at Tlon | The Urbit Series'
'https://www.youtube.com/watch?v=JiNe8XWa7wY'
'Ted Blackman is a senior engineer at Tlon and one of the most advanced Urbit engineers in the world. We discuss how Urbit will get faster, how it will scale to billions of users, and how Urbit fits into the blockchain ecosystem. In some ways Urbit is like a blockchain, in other ways Urbit is the categorical dual of the blockchain, soon there will be a blockchain built on top of Urbit, and more.'
*tags:data
*properties:data
*pictures:data
'http://i3.ytimg.com/vi/JiNe8XWa7wY/hqdefault.jpg'
''
==
[%enditem-other ~]

:portal-manager &portal-action :-  %add  :^  our  [%enditem %other ~]
:*
'The Most Correct Computer (How Urbit Wins) with Philip Monk, CTO of Tlon | The #Urbit Series'
'https://www.youtube.com/watch?v=iFdsQStj4PM'
'Philip Monk co-authored the Urbit whitepaper with Curtis Yarvin back in 2016. He is now the lead engineer working on Urbit, and a thoughtful writer as well. We discuss how to find frontiers, the philosophy of "correctness at all costs," how the current internet is captured by gradient descent, and how Urbit will achieve mass adoption.'
*tags:data
*properties:data
*pictures:data
'http://i3.ytimg.com/vi/iFdsQStj4PM/hqdefault.jpg'
''
==
[%enditem-other ~]

:portal-manager &portal-action :-  %add  :^  our  [%list %enditem %other ~]
:*
'Youtube videos introducing Urbit'
''
''
*tags:data
*properties:data
*pictures:data
''
''
==
:-  %list-enditem-other
:~  [[our [%enditem %other ~] 'insert date when item was created ~2023.2...'] 'yt vid']
    [[our [%enditem %other ~] 'insert date ~2023.2...'] 'yt vid']
    [[our [%enditem %other ~] 'insert date ~2023.2...'] 'yt vid']
==

:portal-manager &portal-action :-  %add  :^  our  [%enditem %other ~]
:*
'The BlockDollar'
'https://mirror.xyz/0x08477a125e282201BacCF4AE2e6136d1F0cEEE36/fNd7kLNFYkq-VMjeRFJ5MjmyzDgNwqmWacYYxXiK27A'
'The BlockDollar, or “What Will Blockchains Actually Be Good For?”'
*tags:data
*properties:data
*pictures:data
'https://mirror-media.imgix.net/publication-images/moUqrDE7XmeVzIcw6LSS_.jpeg?height=243&width=486&h=243&w=486&auto=compress'
''
==
[%enditem-other ~]

:portal-manager &portal-action :-  %add  :^  our  [%enditem %other ~]
:*
'Urbit: functional programming from scratch'
'https://moronlab.blogspot.com/2010/01/urbit-functional-programming-from.html'
'Urbit is a static functional namespace: a programming environment specified as a single stateless, frozen function. The Urbit function is Maxwellian: formally defined by a small system of axioms. Urbit, while a cool toy, is designed for practical computing.'
*tags:data
*properties:data
*pictures:data
''
''
==
[%enditem-other ~]

:portal-manager &portal-action :-  %add  :^  our  [%enditem %other ~]
:*
'Rovnys tweetstorm'
'https://twitter.com/rovnys/status/1371972157971050499?s=20'
'I\'ve begun a series of audio recordings about the design and rationale of Urbit, called Urbit from the Outside In.'
*tags:data
*properties:data
*pictures:data
'https://twitter.com/rovnys/photo'
''
==
[%enditem-other ~]

:portal-manager &portal-action :-  %add  :^  our  [%list %enditem %other ~]
:*
'Articles introducing Urbit'
''
''
*tags:data
*properties:data
*pictures:data
''
''
==
:-  %list-enditem-other
:~  [[our [%enditem %other ~] 'insert date when item was created ~2023.2...'] 'article']
    [[our [%enditem %other ~] 'insert date ~2023.2...'] 'article']
    [[our [%enditem %other ~] 'insert date ~2023.2...'] 'article']
==


:portal-manager &portal-action :-  %add  :^  our  [%list %nonitem %group ~]
:*
'urbit groups for hackers.'
''
'Best urbit groups made for real autists'
*tags:data
*properties:data
*pictures:data
''
''
==
:-  %list-nonitem-group
:~  [[~litmus-ritten [%nonitem %group ~] 'iwtf'] 'internet weirdenss task force']
    [[~litmus-ritten [%nonitem %group ~] 'sis'] 'software intelligence service']
    [[~middev [%nonitem %group ~] 'the-forge'] 'forge the new urbit']
    [[~doplyr-harbur [%nonitem %group ~] 'hacker-house'] 'seth the o.g.']
==

:portal-manager &portal-action :-  %add  :^  our  [%list %nonitem %group ~]
:*
'urbit groups for newbs.'
''
'new to urbit- look no further than this list'
*tags:data
*properties:data
*pictures:data
''
''
==
:-  %list-nonitem-group
:~  [[~bitbet-bolbel [%nonitem %group ~] 'urbit-community'] 'welcome wanderer']
    [[~halbex-palheb [%nonitem %group ~] 'uf-public'] 'the urbit foundation']
    [[~nibset-napwyn [%nonitem %group ~] 'tlon'] 'tlon public']
==

:portal-manager &portal-action :-  %edit  :+  [our [%list %nonitem %ship ~] '~2000.1.1']
:*
'my favourite frens.'
''
''
*tags:data
*properties:data
*pictures:data
''
''
==
:-  %list-nonitem-ship
:~  [[~toptyr-bilder [%nonitem %ship ~] ''] 'portal dude']
    [[~winpex-widtev-foddur-hodler [%nonitem %ship ~] ''] 'spaceman']
    [[~doplyr-harbur [%nonitem %ship ~] ''] 'another portal dude']
    [[~dilryd-mopreg [%nonitem %ship ~] ''] '3rd portal dude']
    [[~foddur-hodler [%nonitem %ship ~] ''] 'portal dudes never stop']
==

:portal-manager &portal-action :-  %edit  :+  [our [%list %nonitem %group ~] '~2000.1.1']
:*
'good places to hang out.'
''
''
*tags:data
*properties:data
*pictures:data
''
''
==
:-  %list-nonitem-group
:~  [[~dalten [%nonitem %group ~] 'aera'] 'Love aera!']
    [[~hocwyn-tipwex [%nonitem %group ~] 'uqbar-event-horizon'] 'Uqbar FTW!']
    [[~dilryd-mopreg [%nonitem %group ~] 'app-store'] 'app-store coming soon TM']
    [[~rondev [%nonitem %group ~] 'group-discovery'] 'Discover groups ayaya']
    [[~poldec-tonteg [%nonitem %group ~] 'the-phantom-tollbooth'] 'esotericism whooooooooa']
    [[~bollug-worlus [%nonitem %group ~] 'urbit-index'] 'indexxxxing urbit']
==

:portal-manager|sub [~winpex-widtev-foddur-hodler [%list %list ~] '~2000.1.1']

:portal-manager|overwrite-list :-
[our [%list %nonitem %group ~] '~2000.1.1']
  :~  [[~dalten [%nonitem %group ~] 'aera'] 'Love aera!']
      [[~hocwyn-tipwex [%nonitem %group ~] 'uqbar-event-horizon'] 'Uqbar FTW!']
      [[~dilryd-mopreg [%nonitem %group ~] 'app-store'] 'app-store coming soon TM']
      [[~rondev [%nonitem %group ~] 'group-discovery'] 'Discover groups ayaya']
      [[~poldec-tonteg [%nonitem %group ~] 'the-phantom-tollbooth'] 'esotericism whooooooooa']
      [[~bollug-worlus [%nonitem %group ~] 'urbit-index'] 'indexxxxing urbit']
  ==

:portal-manager|overwrite-list :-
[our [%list %app ~] '~2000.1.1']
:~  [[~nodmyn-dosrux [%nonitem %app ~] 'radio'] 'dope app']
    [[~bacrys [%nonitem %app ~] 'pokur'] 'another dope app']
    [[~nodmyn-dosrux [%nonitem %app ~] 'houston'] 'manage your moons']
    [[~paldev [%nonitem %app ~] 'pals'] 'add friends on urbit']
    [[~paldev [%nonitem %app ~] 'cliff'] 'your urbit file manager']
    [[~dachus-tiprel [%nonitem %app ~] 'blog'] 'publish to the boomerweb']
==

:portal-manager|overwrite-list :-
[our [%list %nonitem %ship ~] '~2000.1.1']
:~  [[~toptyr-bilder [%nonitem %ship ~] ''] 'portal dude']
    [[~doplyr-harbur [%nonitem %ship ~] ''] 'another portal dude']
    [[~dilryd-mopreg [%nonitem %ship ~] ''] '3rd portal dude']
    [[~foddur-hodler [%nonitem %ship ~] ''] 'portal dudes never stop']
==

;; title=@t
;; link=@t
;; description=@t
;; =tags
;; =properties
;; =pictures
;; image=@t
;; color=@t


// const { ship, type } = ({ keyObj }) => ({
//   ship: keyObj.ship,
//   type: keyObj.type.slice().split("/")
// })(res);

// :portal-manager|del [~winpex-widtev-foddur-hodler [%list %list ~] '~2000.1.1']

// hey dude quick q on pongo - whats the base route for the app /webview? If I I open another tab to grid using the usual URL scheme would that work? or if new tab wouldnt work can I overwrite the location?

NOTE:  you get the format, please add groups/ships/apps into these commands as you please

JURIJ'S STUFF
DONT TOUCH OR YOU WILL GET SMESHED

ERROR TESTING COMMANDS
:portal-manager|overwrite-list [[our [%list %enditem %app ~] '~2000.1.1'] ~[[[~nec [%enditem %app ~] '~2000.1.1'] '']]]
:portal-manager|edit [[our [%enditem %other ~] '~2023.2.14..01.00.02..682e'] feraligatr [%enditem-other ~]]

SCRY examples from dojo
=data -build-file /=portal=/sur/portal/data/hoon
=lib -build-file /=portal=/lib/portal/hoon

.^(?(~ item:data) %gx /=portal-store=/item/~zod/list/enditem/other/~2000.1.1/noun)
.^(key-set:data %gx /=portal-store=/all/keys/portal-key-set)
.^(nested-all-items:conv:lib %gx /=portal-store=/all/nested/portal-nested-all-items)
.^(all-items:conv:lib %gx /=portal-store=/all/items/portal-all-items)
.^(result:data %gx /=portal-store=/valid/latest/~zod/list/list/~2000.1.1/portal-result)
.^(? %gx /=portal-store=/item/exists/~zod/list/enditem/other/~2000.1.1/noun)

______
:portal-manager|overwrite-list [[our [%list %enditem %other ~] '~2000.1.1'] ~[[[~master-dilryd-mopreg [%enditem %other ~] '~2023.2.17..15.08.26..d1dd'] 'I RECOMMEND THIS THING'] [[~dister-dozzod-dilryd-mopreg [%enditem %other ~] '~2023.2.17..15.13.08..f4e3'] 'I RECOMMEND THIS THING TOO']]]
:portal-manager|overwrite-list [[our [%list %nonitem %group ~] '~2000.1.1'] ~[[[~dilryd-mopreg /nonitem/group 'europa'] 'I RECOMMEND THIS THING'] [[~bitbet-bolbel /nonitem/group 'urbit-community'] 'I RECOMMEND THIS THING TOO']]]
.^(item:data %gx /=portal-store=/item/~master-dilryd-mopreg/enditem/app/~2023.2.17..14.13.32..f64a/portal-item)

TODO
- %portal-manager DONE %portal-store DONE portal-lib portal-sur portal-json-lib
- vertical redesign (errors better earlier on %portal-manager). (make it redundant)
- default title: 'Untitled' (maybe type specific? 'Untitled Group'?)
- horizontal redesign?
- what happens with delete and validity store??? no worries?
- general code cleanup
- different seed data?
- update from store to manager
  ->  maybe there should be more metadata except just the item itself?


ASSERTIONS/SPECIFIC TYPES
- how to add a default/bunt value in the data type? (we should add it for color, see where else. where for bespoke?)




TODO LATER
 - purges on a daily/weekly basis or sth
 - TODO printove popravit u portal storeu/manageru i u libu da da kazu title a ne samo pointer
   tj da budu i na vise mjesta di trebaju bit (pomoc ce za debugging kad ljudi krenu koristit)
 - make cards from portal.hoon, and almost dont use any from portal-manager/portal-store explicitly
   or is that less clear? or more clear?
- validation is only for apps

SCRYS/SUBS
- vidjet dii ih sve zovem i vidjet kad crashaju. handleat crashove bolje? jel se mogu handleat?
( to ukljucuje sve !! i sve ?> i ?<)

ERROR HANDLING?
 - what happens if scries fail? (look where they are all used)
 - make sre you dont !!, but return sth like ~
 - find all !!, and make it not crash but handle it

_____

::  is it worth using path format of the pointer everywhere instead of the cell?

::but it'd be useful to get all the ships someone follows, and from there, get all the items from those ships

::  FAQ za data types

::  TODO  annotate code everywhere with comments

::  should bespoke-read only read bespoke-data?
::  or should it be able to interpret the whole item based on its type?
::  whole item is better
::++  bespoke-read
::  |=  [=item]
::  ^-  what should it output???
::

::  how to separate type layer
::  SECURITY  ??

::  - a default peer which we monitor to see the growth of the size and number items, and if we should do sth

::  POINTER parsing rules:
::
::    if =(points-to-item %.n)
::  %app  ->  (weld (weld (scow %p ship) "/") (trip title))  ->  ~zod/app-name
::  %group  ->  (weld (weld (scow %p ship) "/") (trip title))  ->  ~zod/group-name
::  %ship  ->  ship  ->  ~zodž
::  depending on type, q has different meaning
::
::    if =(points-to-item %.y)
::  you can find any item in the global portal namespace with the pointer
::  (assuming right permissions)
::  q means time created-at
::
::
::  ITEM parsing rules:
::
::    if =(type %app)
::  link  ->  distributor desk
::  pictures  ->  screenshots
::  reviews  ->  hash should be compared to hash.docket.bespoke-data
::  name  ->  should be same as in desk


::  (is necessary?)curator can only add apps with valid sigs to app list (whether its %curator-page or %list)?
::  curator can only put apps which are properly validated into another list? (or that doesnt matter and it should be validated locally by any person)

::  item versioning?

::  auto item update (dev-server subbed to dst-server)??


Whatever you add is auto added to your collection (cur=dev)?

how to follow a curator? (e.g. you can find their default %curated easily just by their @p because you know it's '~2000.1.1'

version control such that curator recommends a specific version of it
curator should unrecommend something if it updates?

Curator subs to dev's cur page (change name), receives a list of his items from which he can choose what he puts on his on cur page

extra command for practicality: add pointer to list-of-pointers when you want (so it's like edit item, but specific to the item type)
- in different situations, e.g. auto add a pointer, for all received data for example

specificna mapa/lista itema koji su prikazani? (ako zelis neki hopping algo u buducnosti mozemo)

eventually we want to add "price" property to items.
